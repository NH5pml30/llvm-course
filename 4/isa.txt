0x01 EXIT          ()                           { ctx.stop(); }
0x02 JMP           (label l)                    { ctx.jump(l); }
0x03 JMPEQi        (reg a, imm b, label l)      { if (a == b) ctx.jump(l); }
0x04 JMPLTi        (reg a, imm b, label l)      { if (a < b) ctx.jump(l); }
0x05 JMPGTi        (reg a, imm b, label l)      { if (a > b) ctx.jump(l); }
0x0F WRITE         (reg a)                      { std::cout << a << '\n'; }
0x10 SETi          (reg a, imm b)               { a = b; }
0x11 ADDi          (reg a, reg b, imm c)        { a = b + c; }
0x12 MULi          (reg a, reg b, imm c)        { a = b * c; }
0x13 DIVi          (reg a, reg b, imm c)        { a = b / c; }
0x14 REMi          (reg a, reg b, imm c)        { a = b % c; }
0x15 SHLi          (reg a, reg b, imm c)        { a = b << c; }
0x16 CEQi          (reg a, reg b, imm c)        { a = b == c; }
0x17 CLTi          (reg a, reg b, imm c)        { a = b < c; }
0x18 CGTi          (reg a, reg b, imm c)        { a = b > c; }
0x19 MULADDi       (reg a, reg b, reg c, imm d) { a = b + c * d; }
0x20 SET           (reg a, reg b)               { a = b; }
0x21 ADD           (reg a, reg b, reg c)        { a = b + c; }
0x22 MUL           (reg a, reg b, reg c)        { a = b * c; }
0x23 DIV           (reg a, reg b, reg c)        { a = b / c; }
0x24 REM           (reg a, reg b, reg c)        { a = b % c; }
0x25 SHL           (reg a, reg b, reg c)        { a = b << c; }
0x26 CEQ           (reg a, reg b, reg c)        { a = b == c; }
0x27 CLT           (reg a, reg b, reg c)        { a = b < c; }
0x28 CGT           (reg a, reg b, reg c)        { a = b > c; }
0x29 MULADD        (reg a, reg b, reg c, reg d) { a = b + c * d; }
0x30 ALLOCA        (reg a, imm b)               { a = ctx.alloc(b); }
0x32 STOREi        (reg a, imm b)               { *a = b; }
0x33 STORE         (reg a, reg b)               { *a = b; }
0x34 LOAD          (reg a, reg b)               { a = *b; }
0x40 SIM_RAND      (reg a)                      { a = ctx.simRand(); }
0x41 SIM_FLUSH     ()                           { ctx.simFlush(); }
0x42 SIM_PUT_PIXEL (reg x, reg y, reg c)        { ctx.simPutPixel(x, y, c); }
0x43 SIM_CLEAR     (reg c)                      { ctx.simClear(c); }
